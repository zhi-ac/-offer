/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        if(list1==null) return list2;
        if(list2==null) return list1;
        ListNode cur,head,temp1,temp2;
        if(list1.val<list2.val){
            cur = list1;
            head  = list1;
            temp1 = list1.next;
            temp2 = list2;
        }else{
            cur = list2;
            head = list2;
            temp2 = list2.next;
            temp1 = list1;
        }
        while(temp1!=null||temp2!=null){
            if(temp1!=null&&(temp2==null||temp1.val<temp2.val)){
                cur.next = temp1;
                temp1= temp1.next;
                cur = cur.next;
            }else{
                cur.next = temp2;
                temp2=temp2.next;
                cur = cur.next;
            }   
        }
        return head;
    }
}


public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        ListNode head = new ListNode(-1);
        ListNode root = head;
        while(list1!=null&&list2!=null){
            if(list1.val<list2.val){
                head.next = list1;
                list1 = list1.next;
                head = head.next;
            }else{
                head.next = list2;
                list2 = list2.next;
                head = head.next;
            }
        }
        if(list1!=null){
            head.next = list1;
        }else{
            head.next = list2;
        }
        return root.next;
    }
}



//递归
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        if(list1==null) return list2;
        if(list2==null) return list1;
        ListNode root;
        if(list1.val<list2.val){
            root = new ListNode(list1.val);
            root.next = Merge(list1.next,list2);
        }else{
            root = new ListNode(list2.val);
            root.next = Merge(list1,list2.next);
        }
        return root;
    }
}
