/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        boolean result = false;
        if(root1!=null&&root2!=null){
            if(root1.val==root2.val){
                result = dfs(root1,root2);
            }
            if(!result){
                result =  HasSubtree(root1.left,root2);
            }
            if(!result){
                result = HasSubtree(root1.right,root2);
            }
        }
        return result;
    }
    public boolean dfs(TreeNode root1,TreeNode root2){
        if(root2==null) return true;
        if(root1==null||root1.val!=root2.val) return false;
        return dfs(root1.left,root2.left)&&dfs(root1.right,root2.right);
    }
}


public class Solution {
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        if(root1==null||root2==null) return false;   //root1是空一直没有相同元素匹配。rot2是空的话不是子树 
        return dfs(root1,root2)||HasSubtree(root1.left,root2)||HasSubtree(root1.right,root2);
    }
    public boolean dfs(TreeNode root1,TreeNode root2){
        if(root2==null) return true;//root2为空可以判断出是子树
        if(root1==null||root1.val!=root2.val) return false;//root1是空不能判断出子树
        return dfs(root1.left,root2.left)&&dfs(root1.right,root2.right);
    }
}
